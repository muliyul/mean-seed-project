angular.module("app.services",["ngResource","ngStorage","angular-jwt"]).provider("baseUrl",function(){var e=this;this.url=window.location.origin,this.set=function(e){this.url=e},this.get=function(){return e.url},this.$get=[function(){return{get:function(){return e.url}}}]}).factory("API",["$resource","baseUrl",function(e,t){var n=e(t.get()+"/api/users/:id",{id:"@_id"},{login:{method:"POST",url:t.get()+"/auth/login/:method",params:{method:"@method"},cache:!0},signup:{method:"POST",url:t.get()+"/auth/signup",cache:!0},resetPassword:{method:"POST",url:t.get()+"/auth/reset"}});return angular.extend(n.prototype,{username:function(){return this.identities.local?this.identities.local.username:null},firstName:function(){var e=this.identities.facebook,t=this.identities.google;return{facebook:e?e.first_name:null,google:t?t.first_name:null}},lastName:function(){var e=this.identities.facebook,t=this.identities.google;return{facebook:e?e.last_name:null,google:t?t.last_name:null}},picture:function(){var e=this.identities.facebook,t=this.identities.google;return{facebook:e?e.picture:null,google:t?t.picture:null}},email:function(){var e=this.identities.facebook,t=this.identities.google;return{facebook:e?e.email:null,google:t?t.email:null}},birthday:function(){var e=this.identities.facebook;return{facebook:e?e.birthday:null}}}),{User:n}}]).service("Auth",["$q","Token","API",function(e,t,n){var r=this;return r.user=null,this.login=function(e){return n.User.login(e).$promise.then(function(e){return r.user=e})},this.signup=function(e,t){return n.User.signup({username:e,password:t}).$promise.then(function(e){return r.user=e})},this.logout=function(){r.user=null,t.clear()},this.currentUser=function(){return!r.user&&t.get()&&(r.user=n.User.get({id:t.get().subject})),r.user},this}]).service("Token",["$localStorage","jwtHelper",function(e,t){var n=this;return this.get=function(n){var r=e.token;if(n)return r;try{return t.decodeToken(r)}catch(i){}},this.set=function(t){e.token=t},this.clear=function(){n.set()},this}]).factory("jwtResponseInterceptor",["$q","Token",function(e,t){return{response:function(e){try{var n=e.headers("Authorization").split(" ")[1];n&&t.set(n)}catch(r){}return e},responseError:function(n){switch(n.status){case 401:console.warn(401),t.clear();break;case 403:console.warn(403)}return e.reject(n)}}}]).config(["$httpProvider","jwtInterceptorProvider",function(e,t){t.tokenGetter=["config","Token",function(e,t){return".html"==e.url.substr(e.url.length-5)?null:t.get(!0)}]}]);
//# sourceMappingURL=data:application/json;base64,

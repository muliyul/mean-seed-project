angular.module("app",["ngAnimate","ngTouch","ui.bootstrap","ui.router","ngStorage","oc.lazyLoad","app.services"]).config(["$stateProvider","$urlRouterProvider","$locationProvider","$httpProvider","$localStorageProvider","$ocLazyLoadProvider","$compileProvider","baseUrlProvider",function(e,t,r,o,n,a,l,s){function i(e){return["$ocLazyLoad","$$animateJs",function(t){return t.load(e)}]}s.set("https://meanbp.herokuapp.com"),l.debugInfoEnabled(!1),a.config({debug:!0}),n.setKeyPrefix("app"),o.interceptors.push("jwtInterceptor"),o.interceptors.push("jwtResponseInterceptor"),t.otherwise("/"),e.state("home",{url:"/",templateUrl:"components/statics/home.html"}).state("auth",{"abstract":!0,template:"<ui-view></ui-view>",resolve:{module:i("components/auth/auth.min.js")}}).state("auth.login",{url:"/login",controller:"loginCtrl as vm",templateUrl:"components/auth/login.html",resolve:{user:["$q","Auth",function(e,t){var r=t.currentUser();if(r)return e.reject({redirect:"profile"})}]}}).state("auth.signup",{url:"/signup",controller:"signupCtrl as vm",templateUrl:"components/auth/signup.html"}).state("auth.reset",{url:"/reset",controller:"resetPassCtrl as vm",templateUrl:"components/auth/reset.html"}).state("profile",{url:"/profile",controller:"profileCtrl as vm",templateUrl:"components/profile/profile.html",resolve:{module:i("components/profile/profile.min.js"),user:["$q","Auth",function(e,t){var r=t.currentUser();return r?r.$promise:e.reject({redirect:"auth.login"})}]}}),r.html5Mode(!0).hashPrefix("!")}]).run(["$rootScope","$state",function(e,t){e.$on("$stateChangeError",function(e,r,o,n,a,l){l.redirect?t.go(l.redirect):t.go("error",{status:l.status})})}]),angular.module("app.components",[]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwiJGxvY2FsU3RvcmFnZVByb3ZpZGVyIiwiJG9jTGF6eUxvYWRQcm92aWRlciIsIiRjb21waWxlUHJvdmlkZXIiLCJiYXNlVXJsUHJvdmlkZXIiLCJsYXp5TG9hZCIsImRlcGVuZGVuY2llcyIsIiRvY0xhenlMb2FkIiwibG9hZCIsInNldCIsImRlYnVnSW5mb0VuYWJsZWQiLCJkZWJ1ZyIsInNldEtleVByZWZpeCIsImludGVyY2VwdG9ycyIsInB1c2giLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiYWJzdHJhY3QiLCJ0ZW1wbGF0ZSIsInJlc29sdmUiLCJjb250cm9sbGVyIiwidXNlciIsIiRxIiwiQXV0aCIsImN1cnJlbnRVc2VyIiwicmVqZWN0IiwicmVkaXJlY3QiLCIkcHJvbWlzZSIsImh0bWw1TW9kZSIsImhhc2hQcmVmaXgiLCJydW4iLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwiJG9uIiwiZXZ0IiwidG8iLCJ0b1BhcmFtcyIsImZyb20iLCJmcm9tUGFyYW1zIiwiZXJyb3IiLCJnbyIsInN0YXR1cyJdLCJtYXBwaW5ncyI6IkFBQ0FBLFFBQVFDLE9BQU8sT0FDWCxZQUNBLFVBQ0EsZUFDQSxZQUNBLFlBQ0EsY0FDQSxpQkFFQ0MsUUFBUSxpQkFBa0IscUJBQXNCLG9CQUFxQixnQkFBaUIsd0JBQXlCLHNCQUF1QixtQkFBb0Isa0JBQ3ZKLFNBQVVDLEVBQWdCQyxFQUFvQkMsRUFBbUJDLEVBQWVDLEVBQXVCQyxFQUFxQkMsRUFBa0JDLEdBYTFJLFFBQVNDLEdBQVNDLEdBQ2QsT0FBUSxjQUFlLGNBQWUsU0FBVUMsR0FDNUMsTUFBT0EsR0FBWUMsS0FBS0YsS0FkaENGLEVBQWdCSyxJQUFJLGdDQUVwQk4sRUFBaUJPLGtCQUFpQixHQUVsQ1IsRUFBb0JOLFFBQVFlLE9BQU8sSUFDbkNWLEVBQXNCVyxhQUFhLE9BRW5DWixFQUFjYSxhQUFhQyxLQUFLLGtCQUNoQ2QsRUFBY2EsYUFBYUMsS0FBSywwQkFFaENoQixFQUFtQmlCLFVBQVUsS0FRN0JsQixFQUNLbUIsTUFBTSxRQUNIQyxJQUFLLElBQ0xDLFlBQWEsaUNBR2hCRixNQUFNLFFBQ0hHLFlBQVUsRUFDVkMsU0FBVSxzQkFDVkMsU0FDSTFCLE9BQVFVLEVBQVMsa0NBR3hCVyxNQUFNLGNBQ0hDLElBQUssU0FDTEssV0FBWSxrQkFDWkosWUFBYSw2QkFDYkcsU0FDSUUsTUFBTyxLQUFNLE9BQVEsU0FBVUMsRUFBSUMsR0FDL0IsR0FBSUYsR0FBT0UsRUFBS0MsYUFDaEIsSUFBSUgsRUFDQSxNQUFPQyxHQUFHRyxRQUFRQyxTQUFVLGlCQUszQ1osTUFBTSxlQUNIQyxJQUFLLFVBQ0xLLFdBQVksbUJBQ1pKLFlBQWEsZ0NBRWhCRixNQUFNLGNBQ0hDLElBQUssU0FDTEssV0FBWSxzQkFDWkosWUFBYSwrQkFHaEJGLE1BQU0sV0FDSEMsSUFBSyxXQUNMSyxXQUFZLG9CQUNaSixZQUFhLGtDQUNiRyxTQUNJMUIsT0FBUVUsRUFBUyxxQ0FDakJrQixNQUFPLEtBQU0sT0FBUSxTQUFVQyxFQUFJQyxHQUMvQixHQUFJRixHQUFPRSxFQUFLQyxhQUNoQixPQUFLSCxHQUdFQSxFQUFLTSxTQUZETCxFQUFHRyxRQUFRQyxTQUFVLG9CQU9oRDdCLEVBQ0srQixXQUFVLEdBQ1ZDLFdBQVcsUUFFdkJDLEtBQUssYUFBYyxTQUFVLFNBQVVDLEVBQVlDLEdBQ2hERCxFQUFXRSxJQUFJLG9CQUFxQixTQUFVQyxFQUFLQyxFQUFJQyxFQUFVQyxFQUFNQyxFQUFZQyxHQUMzRUEsRUFBTWIsU0FDTk0sRUFBT1EsR0FBR0QsRUFBTWIsVUFFaEJNLEVBQU9RLEdBQUcsU0FBVUMsT0FBUUYsRUFBTUUsY0FLbERqRCxRQUFRQyxPQUFPIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL0NyZWF0ZWQgYnkgTXVsaSBvbiAwOS1NYXktMTYuXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAnbmdBbmltYXRlJyxcclxuICAgICduZ1RvdWNoJyxcclxuICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdTdG9yYWdlJyxcclxuICAgICdvYy5sYXp5TG9hZCcsXHJcbiAgICAnYXBwLnNlcnZpY2VzJ1xyXG5dKVxyXG4gICAgLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsICckaHR0cFByb3ZpZGVyJywgJyRsb2NhbFN0b3JhZ2VQcm92aWRlcicsICckb2NMYXp5TG9hZFByb3ZpZGVyJywgJyRjb21waWxlUHJvdmlkZXInLCAnYmFzZVVybFByb3ZpZGVyJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIsICRodHRwUHJvdmlkZXIsICRsb2NhbFN0b3JhZ2VQcm92aWRlciwgJG9jTGF6eUxvYWRQcm92aWRlciwgJGNvbXBpbGVQcm92aWRlciwgYmFzZVVybFByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIGJhc2VVcmxQcm92aWRlci5zZXQoJ2h0dHBzOi8vbWVhbmJwLmhlcm9rdWFwcC5jb20nKTtcclxuXHJcbiAgICAgICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZChmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAkb2NMYXp5TG9hZFByb3ZpZGVyLmNvbmZpZyh7ZGVidWc6IHRydWV9KTtcclxuICAgICAgICAgICAgJGxvY2FsU3RvcmFnZVByb3ZpZGVyLnNldEtleVByZWZpeCgnYXBwJyk7XHJcblxyXG4gICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdqd3RJbnRlcmNlcHRvcicpO1xyXG4gICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdqd3RSZXNwb25zZUludGVyY2VwdG9yJyk7XHJcblxyXG4gICAgICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBsYXp5TG9hZChkZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJyRvY0xhenlMb2FkJywgJyQkYW5pbWF0ZUpzJywgZnVuY3Rpb24gKCRvY0xhenlMb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRvY0xhenlMb2FkLmxvYWQoZGVwZW5kZW5jaWVzKTtcclxuICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdob21lJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy8nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9zdGF0aWNzL2hvbWUuaHRtbCdcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdhdXRoJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPHVpLXZpZXc+PC91aS12aWV3PicsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGU6IGxhenlMb2FkKCdjb21wb25lbnRzL2F1dGgvYXV0aC5taW4uanMnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2F1dGgubG9naW4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2xvZ2luJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbG9naW5DdHJsIGFzIHZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYXV0aC9sb2dpbi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI6IFsnJHEnLCAnQXV0aCcsIGZ1bmN0aW9uICgkcSwgQXV0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIgPSBBdXRoLmN1cnJlbnRVc2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3Qoe3JlZGlyZWN0OiAncHJvZmlsZSd9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdhdXRoLnNpZ251cCcsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvc2lnbnVwJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lnbnVwQ3RybCBhcyB2bScsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2F1dGgvc2lnbnVwLmh0bWwnXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdhdXRoLnJlc2V0Jywge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9yZXNldCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Jlc2V0UGFzc0N0cmwgYXMgdm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9hdXRoL3Jlc2V0Lmh0bWwnXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgncHJvZmlsZScsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvcHJvZmlsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2ZpbGVDdHJsIGFzIHZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvcHJvZmlsZS9wcm9maWxlLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlOiBsYXp5TG9hZCgnY29tcG9uZW50cy9wcm9maWxlL3Byb2ZpbGUubWluLmpzJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI6IFsnJHEnLCAnQXV0aCcsIGZ1bmN0aW9uICgkcSwgQXV0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIgPSBBdXRoLmN1cnJlbnRVc2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHtyZWRpcmVjdDogJ2F1dGgubG9naW4nfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICRsb2NhdGlvblByb3ZpZGVyXHJcbiAgICAgICAgICAgICAgICAuaHRtbDVNb2RlKHRydWUpXHJcbiAgICAgICAgICAgICAgICAuaGFzaFByZWZpeCgnIScpO1xyXG4gICAgICAgIH1dKVxyXG4gICAgLnJ1bihbJyRyb290U2NvcGUnLCAnJHN0YXRlJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzdGF0ZSkge1xyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uIChldnQsIHRvLCB0b1BhcmFtcywgZnJvbSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yLnJlZGlyZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oZXJyb3IucmVkaXJlY3QpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdlcnJvcicsIHtzdGF0dXM6IGVycm9yLnN0YXR1c30pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2FwcC5jb21wb25lbnRzJywgW10pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
